<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>PX4 on sunjiyi&#39;s Blogggg</title>
        <link>https://a233a2.github.io/categories/px4/</link>
        <description>Recent content in PX4 on sunjiyi&#39;s Blogggg</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>Sunjiyi Make and Design</copyright>
        <lastBuildDate>Sun, 15 Sep 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://a233a2.github.io/categories/px4/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>PX4飞行控制器开发日志</title>
        <link>https://a233a2.github.io/p/px4%E9%A3%9E%E8%A1%8C%E6%8E%A7%E5%88%B6%E5%99%A8%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/</link>
        <pubDate>Sun, 15 Sep 2024 00:00:00 +0000</pubDate>
        
        <guid>https://a233a2.github.io/p/px4%E9%A3%9E%E8%A1%8C%E6%8E%A7%E5%88%B6%E5%99%A8%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/</guid>
        <description>&lt;h3 id=&#34;px4飞控开发日志&#34;&gt;PX4飞控开发日志
&lt;/h3&gt;&lt;p&gt;项目要求使用PX4来进行450mm无人机的设计。&lt;br&gt;
设计上要求PCB设计出PX4飞控。&lt;br&gt;
测试硬件采用PIXHAWK2.4.8的PX4官方支持硬件。地面站采用QGC，GPS采用微空M902，电机采用朗宇X2212v2-980kV&lt;br&gt;
电调采用好盈天行者40A v2  桨叶为朗宇的LEGO：1047型号 遥控器为富斯i6x&lt;/p&gt;
&lt;h3 id=&#34;px4工程文件解析&#34;&gt;PX4工程文件解析
&lt;/h3&gt;&lt;p&gt;官方Github工程：https://github.com/PX4/PX4-Autopilot
PX4飞控项目通常使用 &lt;strong&gt;NuttX&lt;/strong&gt; 作为其主要的实时操作系统（RTOS）。NuttX 是一个轻量级、可移植、符合 POSIX 标准的 RTOS，非常适合资源受限的嵌入式系统。
由于之前未接触过此种项目，遂对其文件结构进行ChatGPT分析。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://a233a2.github.io/p/px4%E9%A3%9E%E8%A1%8C%E6%8E%A7%E5%88%B6%E5%99%A8%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/px4_1.png&#34;
	width=&#34;991&#34;
	height=&#34;875&#34;
	srcset=&#34;https://a233a2.github.io/p/px4%E9%A3%9E%E8%A1%8C%E6%8E%A7%E5%88%B6%E5%99%A8%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/px4_1_hu10673573407330660024.png 480w, https://a233a2.github.io/p/px4%E9%A3%9E%E8%A1%8C%E6%8E%A7%E5%88%B6%E5%99%A8%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/px4_1_hu2873010366182178476.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;PX4工程文件1&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;113&#34;
		data-flex-basis=&#34;271px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;1.ci：
这个目录通常包含与持续集成（CI）相关的配置文件，例如Jenkins、Travis CI或GitHub Actions的配置。它负责自动化编译、测试、部署等任务。&lt;/p&gt;
&lt;p&gt;2.clusterfuzzlite：
用于与ClusterFuzzLite相关的配置文件，这是一种自动化模糊测试框架，帮助发现代码中的安全漏洞。&lt;/p&gt;
&lt;p&gt;3.devcontainer：
包含VSCode开发容器的配置，用于在隔离的容器环境中开发PX4代码。方便开发人员在一致的开发环境中工作。&lt;/p&gt;
&lt;p&gt;4.github：
包含GitHub的配置文件，如GitHub Actions、Issue模板和Pull Request模板，用于自动化流程和优化项目管理。&lt;/p&gt;
&lt;p&gt;5.vscode：
包含Visual Studio Code的配置文件，定义了编译、调试和代码检查的工作流，以便开发人员在VSCode中更方便地开发PX4代码。&lt;/p&gt;
&lt;p&gt;6.Documentation：
包含项目的文档文件，帮助开发者和用户了解如何使用、配置和开发PX4飞控系统。通常包括用户指南、API文档、教程等。&lt;/p&gt;
&lt;p&gt;7.ROMFS：
ROMFS是只读文件系统，通常用于存储PX4固件中的静态数据，如参数文件、启动脚本等。&lt;/p&gt;
&lt;p&gt;8.Tools：
这个目录包含各种开发工具和脚本，常用于构建、测试、仿真和部署PX4代码。比如，可能包含用于自动化工具链配置的脚本。&lt;/p&gt;
&lt;p&gt;9.boards：
包含与各种硬件平台（如飞控板、传感器等）相关的定义和配置文件。每种硬件的特定启动配置和硬件抽象层都位于该目录中。&lt;/p&gt;
&lt;p&gt;10.cmake：
包含CMake构建系统的配置文件，用于定义如何编译PX4代码。CMake是一个跨平台的构建工具，管理依赖项和生成编译文件。&lt;/p&gt;
&lt;p&gt;11.integrationtests/python_src/px4_it：
包含集成测试相关的Python脚本，主要用于自动化测试PX4的不同模块和功能，以确保系统的稳定性和正确性。&lt;/p&gt;
&lt;p&gt;12.launch：
包含与ROS或仿真环境中的启动文件相关的配置，通常是用于启动PX4在仿真器或真实硬件上的配置文件。&lt;/p&gt;
&lt;p&gt;13.msg：
包含与PX4通信协议（如MAVLink）相关的消息定义文件，用于定义飞控系统与外部系统（如地面站、传感器等）之间的消息格式。&lt;/p&gt;
&lt;p&gt;14.platforms：
包含与不同硬件平台相关的底层代码和配置，如NuttX的初始化文件、硬件抽象层等。&lt;/p&gt;
&lt;p&gt;15.posix-configs：
包含POSIX系统（如Linux）上的配置文件，通常用于定义在仿真环境中运行PX4的配置。&lt;/p&gt;
&lt;p&gt;//16.src：
源代码目录，包含PX4的主要功能模块的实现代码，如飞行控制算法、传感器处理、姿态估计等。&lt;/p&gt;
&lt;p&gt;17.srv：
服务定义文件，通常用于ROS系统中的服务（services），用于系统内不同节点之间的通信和请求/响应模式的交互。&lt;/p&gt;
&lt;p&gt;18.test：
包含测试代码和测试框架，用于对PX4功能进行单元测试和集成测试，确保各个模块功能的正确性和健壮性。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://a233a2.github.io/p/px4%E9%A3%9E%E8%A1%8C%E6%8E%A7%E5%88%B6%E5%99%A8%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/px4_2.png&#34;
	width=&#34;997&#34;
	height=&#34;816&#34;
	srcset=&#34;https://a233a2.github.io/p/px4%E9%A3%9E%E8%A1%8C%E6%8E%A7%E5%88%B6%E5%99%A8%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/px4_2_hu5588688417697814020.png 480w, https://a233a2.github.io/p/px4%E9%A3%9E%E8%A1%8C%E6%8E%A7%E5%88%B6%E5%99%A8%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/px4_2_hu15962098568375647639.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;PX4工程文件2&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;122&#34;
		data-flex-basis=&#34;293px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;19.test_data：
包含测试所需的测试数据或测试脚本，用于集成测试和回归测试，以验证代码改动是否影响系统行为。&lt;/p&gt;
&lt;p&gt;20.validation：
包含验证代码、数据或测试的文件，确保PX4的各个部分在特定条件下的表现符合预期。&lt;/p&gt;
&lt;p&gt;21.clang-tidy：
Clang-Tidy是一个C++代码分析工具，这个文件包含其配置，用于代码的静态分析，发现潜在的错误和优化点。&lt;/p&gt;
&lt;p&gt;22.editorconfig：
EditorConfig配置文件，用于定义代码格式的规则，如缩进、换行符、字符编码等，确保不同开发者之间代码风格的一致性。&lt;/p&gt;
&lt;p&gt;23.gitattributes、.gitignore：
用于Git的配置文件。.gitattributes用于定义文件的特定处理方式，.gitignore则列出需要被Git忽略的文件和目录。&lt;/p&gt;
&lt;p&gt;24.CMakeLists.txt：
这是CMake项目的核心配置文件，定义了如何编译整个PX4项目，包括源文件的路径、依赖项、编译选项等。&lt;/p&gt;
&lt;p&gt;25.CODE_OF_CONDUCT.md：
项目的行为准则，规定了开发者在贡献代码和参与社区时需要遵守的行为规范。&lt;/p&gt;
&lt;p&gt;26.CONTRIBUTING.md：
为开发者提供的贡献指南，解释了如何参与项目开发、提交代码和报告问题等流程。&lt;/p&gt;
&lt;p&gt;27.CTestConfig.cmake：
CMake的测试配置文件，定义了如何运行项目的测试，并收集测试结果。&lt;/p&gt;
&lt;p&gt;28.Jenkinsfile：
Jenkins持续集成系统的配置文件，定义了在Jenkins上自动化构建和测试的流水线。&lt;/p&gt;
&lt;p&gt;29.Kconfig：
用于配置系统的文件，通常用于嵌入式系统中，定义了各个硬件模块或软件模块的配置选项。&lt;/p&gt;
&lt;p&gt;30.LICENSE：
项目的开源许可证文件，说明了PX4的使用和分发权限。&lt;/p&gt;
&lt;p&gt;31.Makefile：
传统的编译配置文件，定义了如何使用Make工具构建项目。对于不使用CMake的部分或平台，Makefile提供了另一种编译方式。&lt;/p&gt;
&lt;p&gt;32.README.md：
项目的概述和基本介绍，通常包括如何编译、安装和使用PX4飞控系统的基本信息。&lt;/p&gt;
&lt;p&gt;33.SECURITY.md：
有关安全漏洞报告和处理流程的文档，指导开发者如何报告和解决项目中的安全问题。&lt;/p&gt;
&lt;p&gt;34.package.xml：
通常用于ROS包，定义了包的元数据，如依赖项、版本号和维护者信息。&lt;/p&gt;
&lt;h3 id=&#34;src文件解析&#34;&gt;SRC文件解析
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;src/modules/mc_att_control：
这个目录包含与多旋翼无人机姿态控制相关的代码。姿态控制的核心就是通过PID控制器来调节无人机的滚转、俯仰和偏航角的稳定性。
mc_att_control_main.cpp 是姿态控制的主要代码文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;src/modules/mc_pos_control：
这个目录包含与多旋翼无人机位置控制相关的代码。PID控制器在此负责无人机的三维位置和高度控制。
mc_pos_control_main.cpp 是位置控制的核心实现文件，包含位置控制的PID逻辑。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;src/lib/controllib：
这个目录下包含PX4的控制库，其中定义了PID控制器的通用实现。这里的文件用于多个模块的控制需求。
pid.cpp 是PID控制器的核心实现，定义了如何计算误差、比例项、积分项和微分项。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;src/modules/fw_att_control 和 src/modules/fw_pos_control：
如果你关注的是固定翼无人机的PID控制，可以查看这两个目录。它们分别负责固定翼无人机的姿态控制和位置控制。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;参数文件 (ROMFS)：
PID控制器的参数通常在参数文件中定义，可以通过修改这些参数调整控制器的性能。可以在 ROMFS/px4fmu_common/init.d 目录中找到默认的参数文件，里面会定义PID控制器的增益值（如P、I、D系数）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;nuttxrtos&#34;&gt;NuttxRTOS
&lt;/h3&gt;&lt;h3 id=&#34;mavlink协议&#34;&gt;MAVLink协议
&lt;/h3&gt;&lt;p&gt;QGC地面站会通过MAVLink协议将QGC针对飞机的配置参数发送给飞控系统，而飞控系统则将这些参数存储在存储设备中。&lt;/p&gt;
&lt;h3 id=&#34;对原有飞行模式修改与添加新的功能&#34;&gt;对原有飞行模式修改与添加新的功能
&lt;/h3&gt;&lt;h4 id=&#34;px4中的飞行模式主要定义文件&#34;&gt;PX4中的飞行模式主要定义文件：
&lt;/h4&gt;&lt;h5 id=&#34;commander模块srcmodulescommander&#34;&gt;Commander模块（src/modules/commander）：
&lt;/h5&gt;&lt;p&gt;主要负责飞行模式的管理和状态机控制。&lt;br&gt;
commander.cpp：这是Commander模块的主文件，包含了飞行模式的&lt;strong&gt;状态机&lt;/strong&gt;逻辑。commander_state.cpp：管理飞行模式的状态定义。&lt;/p&gt;
&lt;h5 id=&#34;flight-mode-manager模块srcmodulesmc_pos_control-和-srcmodulesfw_pos_control_l1&#34;&gt;Flight Mode Manager模块（src/modules/mc_pos_control 和 src/modules/fw_pos_control_l1）：
&lt;/h5&gt;&lt;p&gt;**多旋翼飞行器（mc_pos_control）&lt;strong&gt;和&lt;/strong&gt;固定翼飞行器（fw_pos_control_l1）**的飞行模式控制。&lt;br&gt;
在这些模块中，具体的飞行控制算法实现了如何根据不同的飞行模式，进行姿态、位置或速度控制。&lt;/p&gt;
&lt;p&gt;飞行模式的状态机逻辑位于commander.cpp文件中。它根据用户输入、飞行器状态和环境条件来决定当前飞行模式。你需要熟悉这些状态之间的切换条件以及各模式的具体功能实现。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定义新的飞行模式：&lt;/strong&gt;&lt;br&gt;
在commander_state.h文件中，添加新的飞行模式枚举。例如，如果你要创建一个自定义的“智能悬停模式”：
VEHICLE_MODE_FLAG_SMART_HOVER
&lt;strong&gt;实现飞行模式逻辑：&lt;/strong&gt;&lt;br&gt;
在commander.cpp文件中，添加或修改相应的飞行模式逻辑。
你可以参考已有的飞行模式（如POSCTL或ALTCTL）的实现方式，将自定义逻辑嵌入其中。比如，你可以根据条件判断激活智能悬停模式：&lt;/p&gt;
&lt;p&gt;if (user_input == CUSTOM_SMART_HOVER_CONDITION) {&lt;br&gt;
vehicle_status_s = VEHICLE_MODE_FLAG_SMART_HOVER;&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实现控制算法：&lt;/strong&gt;&lt;br&gt;
根据自定义飞行模式的功能需求，你可能需要在姿态控制模块（mc_att_control）或位置控制模块（mc_pos_control）中添加自定义的控制算法。
可以根据飞行器当前的状态、位置、高度等数据来设计智能悬停的控制算法，使其在特定条件下表现出不同的控制行为。
&lt;strong&gt;测试飞行模式&lt;/strong&gt;&lt;br&gt;
在模拟环境（如SITL）中对修改后的飞行模式进行测试。
确保飞行模式在不同情况下能够正确切换和响应用户输入。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
