[{"content":"FreeRTOS FreeRTOS在嵌入式的开发中十分的重要，本人之前对于同一时间进行多种任务的做法普遍都是设置定时器中断程序。这样做或许能解决燃眉之急，但是在大型项目中便有一些捉襟见肘，尤其是使用这种方式对于MCU的任务调度十分的不明确，显得十分的乱。故对于FreeRTOS这种MCU操作系统的应用便显得尤为重要。 官方文档：https://freertos.org/zh-cn-cmn-s/Documentation/00-Overview\nFreeRTOS核心机制 优先级调度 高优先级的准备就绪后，直接抢占CPU。\nFCFS(先来先服务)\n同优先级，按照准备就绪的先后顺序执行。\n时间片轮询\n有相同优先级的两个任务，其中一个一直没被抢占，则运行时间达到一个时间片则主动让出CPU。\nps：低优先级的任务对时间的控制较为不精确。高优先级的任务可以做到时间精确控制。\nFreeRTOS延时函数 vTaskDelay(ms);\n当前任务暂时暂停xx ms，程序进入阻塞态，其中暂时时间内可以执行其他任务。\nHAL_Delay(ms);\nCPU暂时挂起xx ms，啥也不执行。类似裸机运行时的delay。\nFreeRTOS的部署 ","date":"2024-09-18T00:00:00Z","permalink":"https://a233a2.github.io/p/freertos%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","title":"FreeRTOS学习笔记"},{"content":"ADRC课程笔记 本人对ADRC控制有着深厚的研究兴趣。在讨论研究韩京清先生的ADRC知识之前，我想先给不太专业的自己补习一些经典与现代控制理论方向的相关知识。\n前馈控制 前馈控制是一种基于对扰动的预测进行补偿的控制方法。它通过测量可能影响系统输出的扰动变量，并根据扰动变量与系统输出之间的关系，计算出所需的控制量，在扰动对系统产生影响之前就进行调节，以抵消扰动的影响。 在自动控制系统理论中学习过，由传递函数理论数学推导，前馈的引入可以完全的消除系统的扰动误差。现在这显然并不是这么的简单，这需要对系统数学模型有着十分精确的掌握。\n生理前馈系统 在生理学上，前馈控制的例子是在实际体力活动之前，自主神经系统对心跳的正常预期调节。前馈控制可以比作对已知线索的预期反应（预测编码）。心跳的反馈调节为机体提供了进一步对运动的适应性。 \u0026ndash;wiki百科\n在前馈系统中，控制变量的调整不是以目标和回授之间的误差为基础，它是以过程数学模型的知识和过程扰动的知识或测量为基础。\n所以对于数学模型的整体掌握是对系统扰动进行前馈消除的前提。\n正所谓要想系统稳得住，必须得有前馈引入。前馈控制在某些控制场合下是必须项。\n状态观测器 ","date":"2024-09-16T00:00:00Z","permalink":"https://a233a2.github.io/p/adrc%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/","title":"ADRC课程笔记"},{"content":"YSYX学习日记 ","date":"2024-09-16T00:00:00Z","permalink":"https://a233a2.github.io/p/ysyx%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/","title":"YSYX学习日记"},{"content":"分数阶数学控制 ARDC课程上得到了有关于在分数阶下控制的相关知识，得知其是因为传统的整数阶控制存在一定的信息丢失。使得控制精度在某些场合不尽理想，所以近现代诞生出分数阶控制的相关理论研究。\n巧合的是，分数阶微分的英文缩写居然是FOC！(Fractional Calculus)\n","date":"2024-09-16T00:00:00Z","permalink":"https://a233a2.github.io/p/%E5%88%86%E6%95%B0%E9%98%B6%E6%95%B0%E5%AD%A6%E6%8E%A7%E5%88%B6/","title":"分数阶数学控制"},{"content":"臭猫FOC驱动器设计日志 主控芯片：WCH-CH32V307VCT6\n预驱芯片：EG2133\nMOS：NEC6050\n下载芯片：CH549G\n电流检测：INA240A2 2024-9-15 期待已久的FOC驱动器终于开工设计！设计完成PCB以及原理图。第一次设计双路的FOC驱动器，也是第一次是设计功率地与普通的GND隔离。\n另外就是电流检测芯片选择的是TI的INA240A2，有点难以购买qaq0.0每个芯片的价格在3元左右，属实有点成本爆炸。下次准备学习更换更为便宜的INA199或者其他国产方案。\n2024-9-17 计划物料到货开始焊接\n这板子有一些bug，就是CH549G下载电路的供电有些问题。在使用DC-12v供电测试的时候，CH549G下载电路的供电不稳定。 另外在开环测试的时候供电也不稳定。不知道是不是程序问题。 接下来抽时间对驱动器进行软件开发\n开环FOC驱动测试 开环运行即根据系统时间为索引，根据时间固定生成三相的正弦波。需要涉及Clark变换以及Park变换。 simpleFOC的开环速度代码如下 参考了：https://github.com/haotianh9/DengFOC_on_STM32 电压控制\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 static inline uint32_t LL_SYSTICK_IsActiveCounterFlag(void) { return ((SysTick-\u0026gt;CTRL \u0026amp; SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk)); } uint32_t getCurrentMicros(void) { /* Ensure COUNTFLAG is reset by reading SysTick control and status register */ LL_SYSTICK_IsActiveCounterFlag(); uint32_t m = HAL_GetTick(); const uint32_t tms = SysTick-\u0026gt;LOAD + 1; __IO uint32_t u = tms - SysTick-\u0026gt;VAL; if (LL_SYSTICK_IsActiveCounterFlag()) { m = HAL_GetTick(); u = tms - SysTick-\u0026gt;VAL; } return (m * 1000 + (u * 1000) / tms); } //【应该是获取运行时间的代码段。】 float _electricalAngle(float shaft_angle, int pole_pairs) { return (shaft_angle * pole_pairs); } float _normalizeAngle(float angle){ float a = fmod(angle, 2*M_PI); //取余运算可以用于归一化，列出特殊值例子算便知 return a \u0026gt;= 0 ? a : (a + 2*M_PI); //三目运算符。格式：condition ? expr1 : expr2 //其中，condition 是要求值的条件表达式，如果条件成立，则返回 expr1 的值，否则返回 expr2 的值。 //可以将三目运算符视为 if-else 语句的简化形式。 //fmod 函数的余数的符号与除数相同。因此，当 angle 的值为负数时，余数的符号将与 _2M_PI 的符号相反。 //也就是说，如果 angle 的值小于 0 且 _2M_PI 的值为正数，则 fmod(angle, _2M_PI) 的余数将为负数。 //例如，当 angle 的值为 -M_PI/2，_2M_PI 的值为 2M_PI 时，fmod(angle, _2M_PI) 将返回一个负数。 //在这种情况下，可以通过将负数的余数加上 _2M_PI 来将角度归一化到 [0, 2M_PI] 的范围内，以确保角度的值始终为正数。 } void setPwm(float Ua, float Ub, float Uc) { //\t// 限制上限 Ua = _constrain(Ua, 0.0f, voltage_limit); Ub = _constrain(Ub, 0.0f, voltage_limit); Uc = _constrain(Uc, 0.0f, voltage_limit); // 计算占空比 // 限制占空比从0到1 dc_a = _constrain(Ua / voltage_power_supply, 0.0f , 1.0f ); dc_b = _constrain(Ub / voltage_power_supply, 0.0f , 1.0f ); dc_c = _constrain(Uc / voltage_power_supply, 0.0f , 1.0f ); //写入PWM到PWM 0 1 2 通道 TIM1-\u0026gt;CCR1 = (uint32_t) roundf(dc_a*period); TIM1-\u0026gt;CCR2 = (uint32_t) roundf(dc_b*period); TIM1-\u0026gt;CCR3 = (uint32_t) roundf(dc_c*period); } void setPhaseVoltage(float Uq,float Ud, float angle_el) { angle_el = _normalizeAngle(angle_el + zero_electric_angle); // 帕克逆变换 Ualpha = -Uq*sin(angle_el); Ubeta = Uq*cos(angle_el); // 克拉克逆变换 Ua = Ualpha + voltage_power_supply/2; Ub = (sqrt(3)*Ubeta-Ualpha)/2 + voltage_power_supply/2; Uc = (-Ualpha-sqrt(3)*Ubeta)/2 + voltage_power_supply/2; setPwm(Ua,Ub,Uc); } //开环速度函数 float velocityOpenloop(float target_velocity){ //\tuint32_t now_us = getCurrentMicros(); //\tuint32_t now_us = HAL_GetTick(); // Provides a tick value in microseconds. //计算当前每个Loop的运行时间间隔 // float Ts = (now_us - open_loop_timestamp) * 1e-3f; float Ts=5E-3f; // 通过乘以时间间隔和目标速度来计算需要转动的机械角度，存储在 shaft_angle 变量中。 //在此之前，还需要对轴角度进行归一化，以确保其值在 0 到 2π 之间。 shaft_angle = _normalizeAngle(shaft_angle + target_velocity*Ts); //以目标速度为 10 rad/s 为例，如果时间间隔是 1 秒，则在每个循环中需要增加 10 * 1 = 10 弧度的角度变化量，才能使电机转动到目标速度。 //如果时间间隔是 0.1 秒，那么在每个循环中需要增加的角度变化量就是 10 * 0.1 = 1 弧度，才能实现相同的目标速度。 //因此，电机轴的转动角度取决于目标速度和时间间隔的乘积。 // Uq is not related to voltage limit float Uq = 5.5; setPhaseVoltage(Uq, 0, _electricalAngle(shaft_angle, pole_pairs)); // open_loop_timestamp = now_us; //用于计算下一个时间间隔 return Uq; } 波形图根据上述代码来生成的话有些错误。这导致电机不能正确转动。而发出固定的啸叫。\n时间改为us后，波形图更加混乱。\n将时间的获取改为定时器中断+全局变量后。首先设置1us生成波形图如下：\n调整为200us时波形图如下：\n按理说这样运行开环已经可以完美运行，但是接入电脑5v-usb供电的时候电机依然跳动+啸叫。\n接入正常12v电源供电时，板子直接没了反应。。可能是设计的电源出现了问题。将电压降低到5v后板子可以正常上电启动，但是无法正常运行，整体是一种上电运行后，电机转动力巨大，然后系统死机重启陷入了死循环。\n电源设计还是不太过关。。。而且设计的有些混乱。。计划下一板改进，但是这种工程耗费时间太大了，下次进行工程实现之前应该提前做好功课。\nAS5600磁编码器电机底板 2024-9-18 PCB刚刚到货，准备抽时间进行焊接。再一次把CM_FOC的串口通信部分焊接完成，方便查看波形等。 SH1.25的接口画错了，属实是大意了。飞线暂时解决了问题。 AS5600磁编码器数据读取 AS5600是12位的霍尔磁编码器，它的地址是0x36，只需要读取0x0C、0x0D这两个寄存器就可以读出角度的原始数据，再将其乘以360，再除以4096，就可以获得角度值。\n速度闭环测试 ","date":"2024-09-15T00:00:00Z","permalink":"https://a233a2.github.io/p/cm_foc%E9%A9%B1%E5%8A%A8%E5%99%A8/","title":"CM_FOC驱动器"},{"content":"PX4飞控开发日志 项目要求使用PX4来进行450mm无人机的设计。\n设计上要求PCB设计出PX4飞控。\n测试硬件采用PIXHAWK2.4.8的PX4官方支持硬件。地面站采用QGC，GPS采用微空M902，电机采用朗宇X2212v2-980kV\n电调采用好盈天行者40A v2 桨叶为朗宇的LEGO：1047型号 遥控器为富斯i6x\nPX4工程文件解析 官方Github工程：https://github.com/PX4/PX4-Autopilot PX4飞控项目通常使用 NuttX 作为其主要的实时操作系统（RTOS）。NuttX 是一个轻量级、可移植、符合 POSIX 标准的 RTOS，非常适合资源受限的嵌入式系统。 由于之前未接触过此种项目，遂对其文件结构进行ChatGPT分析。\n1.ci： 这个目录通常包含与持续集成（CI）相关的配置文件，例如Jenkins、Travis CI或GitHub Actions的配置。它负责自动化编译、测试、部署等任务。\n2.clusterfuzzlite： 用于与ClusterFuzzLite相关的配置文件，这是一种自动化模糊测试框架，帮助发现代码中的安全漏洞。\n3.devcontainer： 包含VSCode开发容器的配置，用于在隔离的容器环境中开发PX4代码。方便开发人员在一致的开发环境中工作。\n4.github： 包含GitHub的配置文件，如GitHub Actions、Issue模板和Pull Request模板，用于自动化流程和优化项目管理。\n5.vscode： 包含Visual Studio Code的配置文件，定义了编译、调试和代码检查的工作流，以便开发人员在VSCode中更方便地开发PX4代码。\n6.Documentation： 包含项目的文档文件，帮助开发者和用户了解如何使用、配置和开发PX4飞控系统。通常包括用户指南、API文档、教程等。\n7.ROMFS： ROMFS是只读文件系统，通常用于存储PX4固件中的静态数据，如参数文件、启动脚本等。\n8.Tools： 这个目录包含各种开发工具和脚本，常用于构建、测试、仿真和部署PX4代码。比如，可能包含用于自动化工具链配置的脚本。\n9.boards： 包含与各种硬件平台（如飞控板、传感器等）相关的定义和配置文件。每种硬件的特定启动配置和硬件抽象层都位于该目录中。\n10.cmake： 包含CMake构建系统的配置文件，用于定义如何编译PX4代码。CMake是一个跨平台的构建工具，管理依赖项和生成编译文件。\n11.integrationtests/python_src/px4_it： 包含集成测试相关的Python脚本，主要用于自动化测试PX4的不同模块和功能，以确保系统的稳定性和正确性。\n12.launch： 包含与ROS或仿真环境中的启动文件相关的配置，通常是用于启动PX4在仿真器或真实硬件上的配置文件。\n13.msg： 包含与PX4通信协议（如MAVLink）相关的消息定义文件，用于定义飞控系统与外部系统（如地面站、传感器等）之间的消息格式。\n14.platforms： 包含与不同硬件平台相关的底层代码和配置，如NuttX的初始化文件、硬件抽象层等。\n15.posix-configs： 包含POSIX系统（如Linux）上的配置文件，通常用于定义在仿真环境中运行PX4的配置。\n//16.src： 源代码目录，包含PX4的主要功能模块的实现代码，如飞行控制算法、传感器处理、姿态估计等。\n17.srv： 服务定义文件，通常用于ROS系统中的服务（services），用于系统内不同节点之间的通信和请求/响应模式的交互。\n18.test： 包含测试代码和测试框架，用于对PX4功能进行单元测试和集成测试，确保各个模块功能的正确性和健壮性。\n19.test_data： 包含测试所需的测试数据或测试脚本，用于集成测试和回归测试，以验证代码改动是否影响系统行为。\n20.validation： 包含验证代码、数据或测试的文件，确保PX4的各个部分在特定条件下的表现符合预期。\n21.clang-tidy： Clang-Tidy是一个C++代码分析工具，这个文件包含其配置，用于代码的静态分析，发现潜在的错误和优化点。\n22.editorconfig： EditorConfig配置文件，用于定义代码格式的规则，如缩进、换行符、字符编码等，确保不同开发者之间代码风格的一致性。\n23.gitattributes、.gitignore： 用于Git的配置文件。.gitattributes用于定义文件的特定处理方式，.gitignore则列出需要被Git忽略的文件和目录。\n24.CMakeLists.txt： 这是CMake项目的核心配置文件，定义了如何编译整个PX4项目，包括源文件的路径、依赖项、编译选项等。\n25.CODE_OF_CONDUCT.md： 项目的行为准则，规定了开发者在贡献代码和参与社区时需要遵守的行为规范。\n26.CONTRIBUTING.md： 为开发者提供的贡献指南，解释了如何参与项目开发、提交代码和报告问题等流程。\n27.CTestConfig.cmake： CMake的测试配置文件，定义了如何运行项目的测试，并收集测试结果。\n28.Jenkinsfile： Jenkins持续集成系统的配置文件，定义了在Jenkins上自动化构建和测试的流水线。\n29.Kconfig： 用于配置系统的文件，通常用于嵌入式系统中，定义了各个硬件模块或软件模块的配置选项。\n30.LICENSE： 项目的开源许可证文件，说明了PX4的使用和分发权限。\n31.Makefile： 传统的编译配置文件，定义了如何使用Make工具构建项目。对于不使用CMake的部分或平台，Makefile提供了另一种编译方式。\n32.README.md： 项目的概述和基本介绍，通常包括如何编译、安装和使用PX4飞控系统的基本信息。\n33.SECURITY.md： 有关安全漏洞报告和处理流程的文档，指导开发者如何报告和解决项目中的安全问题。\n34.package.xml： 通常用于ROS包，定义了包的元数据，如依赖项、版本号和维护者信息。\nSRC文件解析 src/modules/mc_att_control： 这个目录包含与多旋翼无人机姿态控制相关的代码。姿态控制的核心就是通过PID控制器来调节无人机的滚转、俯仰和偏航角的稳定性。 mc_att_control_main.cpp 是姿态控制的主要代码文件。\nsrc/modules/mc_pos_control： 这个目录包含与多旋翼无人机位置控制相关的代码。PID控制器在此负责无人机的三维位置和高度控制。 mc_pos_control_main.cpp 是位置控制的核心实现文件，包含位置控制的PID逻辑。\nsrc/lib/controllib： 这个目录下包含PX4的控制库，其中定义了PID控制器的通用实现。这里的文件用于多个模块的控制需求。 pid.cpp 是PID控制器的核心实现，定义了如何计算误差、比例项、积分项和微分项。\nsrc/modules/fw_att_control 和 src/modules/fw_pos_control： 如果你关注的是固定翼无人机的PID控制，可以查看这两个目录。它们分别负责固定翼无人机的姿态控制和位置控制。\n参数文件 (ROMFS)： PID控制器的参数通常在参数文件中定义，可以通过修改这些参数调整控制器的性能。可以在 ROMFS/px4fmu_common/init.d 目录中找到默认的参数文件，里面会定义PID控制器的增益值（如P、I、D系数）。\nNuttxRTOS 这应该是个很复杂的单片机实时系统。\nMAVLink协议 QGC地面站会通过MAVLink协议将QGC针对飞机的配置参数发送给飞控系统，而飞控系统则将这些参数存储在存储设备中。\n对原有飞行模式修改与添加新的功能 PX4中的飞行模式主要定义文件： Commander模块（src/modules/commander）： 主要负责飞行模式的管理和状态机控制。\ncommander.cpp：这是Commander模块的主文件，包含了飞行模式的状态机逻辑。commander_state.cpp：管理飞行模式的状态定义。\nFlight Mode Manager模块（src/modules/mc_pos_control 和 src/modules/fw_pos_control_l1）： **多旋翼飞行器（mc_pos_control）和固定翼飞行器（fw_pos_control_l1）**的飞行模式控制。\n在这些模块中，具体的飞行控制算法实现了如何根据不同的飞行模式，进行姿态、位置或速度控制。\n飞行模式的状态机逻辑位于commander.cpp文件中。它根据用户输入、飞行器状态和环境条件来决定当前飞行模式。你需要熟悉这些状态之间的切换条件以及各模式的具体功能实现。\n定义新的飞行模式：\n在commander_state.h文件中，添加新的飞行模式枚举。例如，如果你要创建一个自定义的“智能悬停模式”： VEHICLE_MODE_FLAG_SMART_HOVER 实现飞行模式逻辑：\n在commander.cpp文件中，添加或修改相应的飞行模式逻辑。 你可以参考已有的飞行模式（如POSCTL或ALTCTL）的实现方式，将自定义逻辑嵌入其中。比如，你可以根据条件判断激活智能悬停模式：\nif (user_input == CUSTOM_SMART_HOVER_CONDITION) {\nvehicle_status_s = VEHICLE_MODE_FLAG_SMART_HOVER;\n}\n实现控制算法：\n根据自定义飞行模式的功能需求，你可能需要在姿态控制模块（mc_att_control）或位置控制模块（mc_pos_control）中添加自定义的控制算法。 可以根据飞行器当前的状态、位置、高度等数据来设计智能悬停的控制算法，使其在特定条件下表现出不同的控制行为。 测试飞行模式\n在模拟环境（如SITL）中对修改后的飞行模式进行测试。 确保飞行模式在不同情况下能够正确切换和响应用户输入。\n","date":"2024-09-15T00:00:00Z","permalink":"https://a233a2.github.io/p/px4%E9%A3%9E%E8%A1%8C%E6%8E%A7%E5%88%B6%E5%99%A8%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/","title":"PX4飞行控制器开发日志"},{"content":"hello！ hello！ wtf！hello！ ","date":"2024-09-14T22:20:23+08:00","permalink":"https://a233a2.github.io/p/%E4%B8%AA%E4%BA%BA%E6%9D%82%E8%AE%B0/","title":"个人杂记"},{"content":"CH32平衡车开发板设计 主控芯片：CH32V307VCT6 电机驱动：TB6612方案 下载芯片：CH549G 开源链接：https://github.com/a233a2/CH32_DC_BalanceCar\nPID平衡部分计划使用两种方案进行对比 1 pid_1.c文件 即不通过控制角度来确定速度，通过将直立环PID的目标设为重力0点，来维持平衡，之后通过速度环调速。 2 pid.c文件 通过控制角度来确定速度，速度环输出目标速度下的应得角度，直立环与速度环串级，直立环负责达到对应角度。\n某些地方还并不完善，比如PID参数方面还不尽完美。在之后我将从算法方面对其进行优化。从数学角度找找这两种方案的不同之处。\n","date":"2024-07-15T00:00:00Z","permalink":"https://a233a2.github.io/p/ch32%E5%B9%B3%E8%A1%A1%E8%BD%A6%E5%BC%80%E5%8F%91%E6%9D%BF/","title":"CH32平衡车开发板"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL + ALT + Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11T00:00:00Z","image":"https://a233a2.github.io/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hu6307248181568134095.jpg","permalink":"https://a233a2.github.io/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\nCreate a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so: 1 2 3 {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} To enable KaTeX globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTeX on a per page basis include the parameter math: true in content files Note: Use the online reference of Supported TeX Functions\nExamples Inline math: $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$\nBlock math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n","date":"2019-03-08T00:00:00Z","permalink":"https://a233a2.github.io/p/math-typesetting/","title":"Math Typesetting"}]